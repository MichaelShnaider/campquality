// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
// Placeholders with the same ids are connected.
// Example:
// "Print to console": {
// 	"scope": "javascript,typescript",
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
{
  "Print to console": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "clog",
    "body": [
      "console.log($0);",
    ],
    "description": "Logs output to console"
  },
  "Print here to console": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "chere",
    "body": [
      "console.log('%cGOES HERE', 'color: red; font-size: 16px;'${1});"
    ],
    "description": "Logs output 'Goes here' to console"
  },
  "Component did mount": {
    "scope": "typescriptreact",
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t${1}",
      "}",
    ],
    "description": "Creates the componentDidMount() lifecycle function"
  },
  "Component will unmount": {
    "scope": "typescriptreact",
    "prefix": "cwu",
    "body": [
      "componentWillUnmount() {",
      "\t${1}",
      "}",
    ],
  },
  "Should component update": {
    "scope": "typescriptreact",
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps: ${1:Name}Props, nextState: ${1:Name}State) {",
      "\t${2}",
      "}"
    ],
    "description": "Creates the shouldComponentUpdate() lifecycle function"
  },
  "Get derived state": {
    "scope": "typescriptreact",
    "prefix": "gdsfp",
    "body": [
      "static getDerivedStateFromProps(nextProps: ${1:Name}Props, prevState: ${1:Name}State) {",
      "  ${2}",
      "}"
    ],
    "description": "Creates the getDerivedStateFromProps lifecycle function"
  },
  "Component did update": {
    "scope": "typescriptreact",
    "prefix": "cdu",
    "body": [
      "componentDidUpdate(prevProps: Props, prevState: State) {",
      "\t${1}",
      "}"
    ],
    "description": "Creates the componentDidUpdate() lifecycle function"
  },
  "Stateful react component": {
    "scope": "typescriptreact",
    "prefix": "reactcomp",
    "body": [
      "import React, {Component} from 'react';",
      "",
      "type Props = {};",
      "type State = {};",
      "",
      "class ${1:Name} extends Component<Props, State> {",
      "\tpublic static defaultProps = {};",
      "",
      "\tconstructor(props: Props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = {};",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>Component</div>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default ${1:Name};",
      "",
    ],
    "description": "Creates a stateful React component."
  },
  "React stateless component": {
    "scope": "typescriptreact",
    "prefix": "reactfunc",
    "body": [
      "import React, {SFC} from 'react';",
      "",
      "type ${1:Name}Props = {};",
      "",
      "const ${1:Name}: SFC<${1:Name}Props> = (props) => {",
      "",
      "\treturn (",
      "\t\t<div>Component</div>",
      "\t);",
      "}",
      "",
    ],
    "description": "Creates a stateless React component."
  },
  "React connected component": {
    "scope": "typescriptreact",
    "prefix": "reactconnect",
    "body": [
      "import React, {Component} from 'react';",
      "import {bindActionCreators, Dispatch} from 'redux';",
      "import {connect} from 'react-redux';",
      "",
      "type OwnProps = {};",
      "type StateProps = {};",
      "type DispatchProps = {};",
      "type Props = StateProps & DispatchProps & OwnProps;",
      "type State = {};",
      "",
      "class ${1:Name} extends Component<Props, State> {",
      "\tpublic static defaultProps = {};",
      "",
      "\tconstructor(props: Props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = {};",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<div>Component</div>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "function mapStateToProps(state: RootState): StateProps {",
      "\treturn {};",
      "}",
      "",
      "function mapDispatchToProps(dispatch: Dispatch): DispatchProps {",
      "\treturn bindActionCreators({}, dispatch);",
      "}",
      "",
      "export default connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(${1:Name});",
      "",
    ],
    "description": "Creates a React component connected to Redux"
  },
  "Redux reducer": {
    "scope": "typescriptreact",
    "prefix": "reduxreducer",
    "body": [
      "import {${4:ACTION_TYPE}} from '${3:path}';",
      "",
      "export function ${1:name}(state = ${2:type}, action) {",
      "\tswitch (action.type) {",
      "\t\tcase ${4:ACTION_TYPE}: {",
      "\t\t\treturn action.payload;",
      "\t\t}",
      "\t\tdefault: {",
      "\t\t\treturn state;",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Creates a Redux reducer"
  },
  "Map state to props": {
    "scope": "typescriptreact",
    "prefix": "mstp",
    "body": [
      "function mapStateToProps({}: RootState): StateProps {",
      "\treturn {};",
      "}"
    ],
    "description": "Creates a mapStateToProps function",
  },
  "Map dispatch to props": {
    "scope": "typescriptreact",
    "prefix": "mdtp",
    "body": [
      "function mapDispatchToProps(dispatch: Dispatch): DispatchProps {",
      "\treturn bindActionCreators({}, dispatch);",
      "}"
    ],
    "description": "Creates a mapDispatchToProps function",
  }
}
